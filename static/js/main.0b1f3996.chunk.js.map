{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","link","serving","Rounded","Math","round","className","map","text","src","alt","onClick","window","open","App","useState","recipe","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","key","label","url","yield","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSA0BeA,G,MAvBA,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAErDC,EAAUC,KAAKC,MAAMP,GAM3B,OACE,yBAAKQ,UAAU,UACb,4BAAKT,GACL,wBAAIS,UAAU,oBACXN,EAAYO,KAAI,SAAAP,GAAW,OAC1B,4BAAKA,EAAYQ,UAGrB,wCAAcN,GACd,wCAAcC,EAAd,QACA,yBAAKM,IAAKV,EAAOW,IAAKb,EAAOc,QAbZ,WACnBC,OAAOC,KAAKZ,SC2DDa,G,MAhEH,WACV,IADgB,EAIaC,mBAAS,IAJtB,mBAITC,EAJS,KAIDC,EAJC,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,WANnB,mBAMTK,EANS,KAMFC,EANE,KAOhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAXf,WAWe,oBAVd,qCASG,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAmBhB,OACE,yBAAKvB,UAAU,OACb,+CACkB,uBAAGA,UAAU,qBAE/B,6FACA,0BAAM0B,SAZQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KASmBb,UAAU,eACnC,2BACE6B,KAAK,OACL7B,UAAU,aACV8B,MAAOlB,EACPmB,SArBa,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAsBf,4BAAQD,KAAK,SAAS7B,UAAU,iBAAhC,mBAIF,yBAAKA,UAAU,WACZU,EAAOT,KAAI,SAAAS,GAAM,OAChB,kBAAC,EAAD,CACEuB,IAAKvB,EAAOA,OAAOwB,MACnB3C,MAAOmB,EAAOA,OAAOwB,MACrB1C,SAAUkB,EAAOA,OAAOlB,SACxBC,MAAOiB,EAAOA,OAAOjB,MACrBC,YAAagB,EAAOA,OAAOhB,YAC3BC,KAAMe,EAAOA,OAAOyB,IACpBvC,QAASc,EAAOA,OAAO0B,eChDfC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.0b1f3996.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Recipe.css\";\r\n\r\nconst Recipe = ({ title, calories, image, ingredients, link, serving }) => {\r\n  //console.log(calories);\r\n  const Rounded = Math.round(calories);\r\n  //console.log(Rounded);\r\n  //console.log(link);\r\n  const directToLink = () => {\r\n    window.open(link);\r\n  };\r\n  return (\r\n    <div className=\"recipe\">\r\n      <h1>{title}</h1>\r\n      <ul className=\"ingredients-list\">\r\n        {ingredients.map(ingredients => (\r\n          <li>{ingredients.text}</li>\r\n        ))}\r\n      </ul>\r\n      <p>Servings: {serving}</p>\r\n      <p>Calories: {Rounded}KCAL</p>\r\n      <img src={image} alt={title} onClick={directToLink}></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nconst App = () => {\n  const APP_ID = \"b997977f\";\n  const APP_KEY = \"95480d60fd173dfb0d12084151b4dfd4\";\n\n  const [recipe, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Look up Recipes <i className=\"fas fa-utensils\"></i>\n      </h1>\n      <h4>For more instruction on how to prepare it, click on the image</h4>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          type=\"text\"\n          className=\"search-bar\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button type=\"submit\" className=\"search-button\">\n          Give Me Recipe\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipe.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            link={recipe.recipe.url}\n            serving={recipe.recipe.yield}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}